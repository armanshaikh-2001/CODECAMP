# -*- coding: utf-8 -*-
"""Medical Data Visualizer.pynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hMmO6z8RULvlzYiP3ldU3qGwdLvur_Z5
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load data
df = pd.read_csv('/content/medical_examination.csv')

# Calculate BMI
df['BMI'] = df['weight'] / (df['height'] / 100) ** 2
# Add 'overweight' column: 1 if BMI > 25 else 0
df['overweight'] = (df['BMI'] > 25).astype(int)

# Normalize cholesterol and gluc values
df['cholesterol'] = (df['cholesterol'] > 1).astype(int)
df['gluc'] = (df['gluc'] > 1).astype(int)

def draw_cat_plot():
    # Create DataFrame for cat plot using pd.melt
    df_cat = pd.melt(df, id_vars=['cardio'],
                     value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active', 'overweight'])

    # Group by cardio and categorical variables, count values
    df_cat = df_cat.groupby(['cardio', 'variable', 'value'], as_index=False).size()

    # Rename the 'size' column to 'total'
    df_cat = df_cat.rename(columns={'size': 'total'})

    # Draw the catplot using sns
    fig = sns.catplot(x='variable', y='total', hue='value', col='cardio', data=df_cat, kind='bar').fig

    return fig

def draw_heat_map():
    # Clean data
    df_heat = df[
        (df['ap_lo'] <= df['ap_hi']) &
        (df['height'] >= df['height'].quantile(0.025)) &
        (df['height'] <= df['height'].quantile(0.975)) &
        (df['weight'] >= df['weight'].quantile(0.025)) &
        (df['weight'] <= df['weight'].quantile(0.975))
    ]

    # Calculate correlation matrix
    corr = df_heat.corr()

    # Generate a mask for the upper triangle
    mask = np.triu(corr)

    # Set up the matplotlib figure
    fig, ax = plt.subplots(figsize=(10, 8))

    # Draw the heatmap with sns.heatmap()
    sns.heatmap(corr, annot=True, fmt='.1f', mask=mask, cmap='coolwarm', ax=ax)

    return fig

# Generate and display/save the heat map
fig_heat = draw_heat_map()
fig_heat.savefig('heatmap_output.png')  # Save to a file
plt.show()  # Display the figure

# Generate and display/save the categorical plot
fig_cat = draw_cat_plot()
fig_cat.savefig('catplot_output.png')  # Save to a file
plt.show()  # Display the figure